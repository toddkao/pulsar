{"map":"{\"version\":3,\"file\":\"Shape.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/common/Shape.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,IAAI,MAAM,QAAQ,CAAC;AAC1B,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,MAAM,CAAC,OAAO;IAIZ,YAA4B,MAAgB;QAAhB,WAAM,GAAN,MAAM,CAAU;QAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,aAAa,CAAC,KAAa;QACzB,IAAI,UAAU,GAAW,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAW,IAAI,MAAM,CAAC;YACpC,CAAC,EAAE,KAAK,CAAC,CAAC;YACV,CAAC,EAAE,MAAM,CAAC,gBAAgB;SAC3B,CAAC,CAAC;QACH,MAAM,SAAS,GAAS,IAAI,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAEpD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAU,EAAE,EAAE;YAChC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAC9B,UAAU,EAAE,CAAC;aACd;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;IAC3B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAEO,MAAM,CAAC,SAAS,CAAC,MAAgB;QACvC,MAAM,KAAK,GAAW,EAAE,CAAC;QACzB,MAAM,SAAS,GAAa,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAE5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,MAAM,CAAC,GAAW,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,GAAW,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,EAAE,GAAS,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChB;QAED,MAAM,UAAU,GAAW,SAAS,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,SAAS,GAAW,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1D,MAAM,WAAW,GAAS,IAAI,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAE1D,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAExB,OAAO,KAAK,CAAC;IACf,CAAC;CACF\"}","code":"import Vector from './Vector';\r\nimport Line from './Line';\r\nimport BoundingBox from './BoundingBox';\r\nimport { isOdd } from '../util';\r\nexport default class Shape {\r\n    constructor(points) {\r\n        this.points = points;\r\n        this.lines = Shape.makeLines(points);\r\n        this.boundingBox = new BoundingBox(points);\r\n    }\r\n    containsPoint(point) {\r\n        let intersects = 0;\r\n        const checkPoint = new Vector({\r\n            x: point.x,\r\n            y: Number.MAX_SAFE_INTEGER,\r\n        });\r\n        const checkLine = new Line(point, checkPoint);\r\n        this.lines.forEach((line) => {\r\n            if (line.intersects(checkLine)) {\r\n                intersects++;\r\n            }\r\n        });\r\n        return isOdd(intersects);\r\n    }\r\n    get centroid() {\r\n        return Vector.FindPolyCentroid(this.points);\r\n    }\r\n    static makeLines(points) {\r\n        const lines = [];\r\n        const ccwPoints = Vector.ArrangePointsCCW(points);\r\n        for (let i = 1; i < ccwPoints.length; i++) {\r\n            const a = ccwPoints[i - 1];\r\n            const b = ccwPoints[i];\r\n            const ab = new Line(a, b);\r\n            lines.push(ab);\r\n        }\r\n        const firstPoint = ccwPoints[0];\r\n        const lastPoint = ccwPoints[ccwPoints.length - 1];\r\n        const closingLine = new Line(firstPoint, lastPoint);\r\n        lines.push(closingLine);\r\n        return lines;\r\n    }\r\n}\r\n//# sourceMappingURL=Shape.js.map","dtsmap":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/common/Shape.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"Shape.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../src/common/Shape.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,IAAI,MAAM,QAAQ,CAAC;AAC1B,OAAO,WAAW,MAAM,eAAe,CAAC;AAGxC,MAAM,CAAC,OAAO;aAIgB,MAAM,EAAE,MAAM,EAAE;IAH5C,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;IACvB,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;gBAEN,MAAM,EAAE,MAAM,EAAE;IAK5C,aAAa,CAAC,KAAK,EAAE,MAAM,GAAG,OAAO;aAiBjC,QAAQ,EAAI,MAAM;IAItB,OAAO,CAAC,MAAM,CAAC,SAAS;CAmBzB\"}"},"dts":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/common/Shape.d.ts","text":"import Vector from './Vector';\r\nimport Line from './Line';\r\nimport BoundingBox from './BoundingBox';\r\nexport default class Shape {\r\n    readonly points: Vector[];\r\n    readonly lines: Line[];\r\n    readonly boundingBox: BoundingBox;\r\n    constructor(points: Vector[]);\r\n    containsPoint(point: Vector): boolean;\r\n    readonly centroid: Vector;\r\n    private static makeLines;\r\n}\r\n//# sourceMappingURL=Shape.d.ts.map"}}
