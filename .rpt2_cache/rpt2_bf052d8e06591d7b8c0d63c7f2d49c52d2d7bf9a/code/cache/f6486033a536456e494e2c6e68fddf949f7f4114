{"map":"{\"version\":3,\"file\":\"MinimumSpanningTree.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/triangulation/MinimumSpanningTree.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAGjC,MAAM,CAAC,OAAO;IAMZ,YAAY,EAAE,KAAK,EAAiB;QAL3B,UAAK,GAAW,EAAE,CAAC;QACpB,qBAAgB,GAAW,EAAE,CAAC;QAC9B,gBAAW,GAAW,EAAE,CAAC;QAChB,uBAAkB,GAAW,EAAE,CAAC;QAG/C,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAClC,CAAC;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,KAAK;QACH,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAU,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAEnE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAU,EAAE,CAAS,EAAE,EAAE;YACjD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBAClC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7E,CAAC;IAEO,QAAQ;QACd,IAAI,KAAK,GAAW,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACnE,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;IACrC,CAAC;CACF\"}","code":"import { Line } from '../common';\r\nexport default class MinimumSpanningTree {\r\n    constructor({ lines }) {\r\n        this.lines = [];\r\n        this._nonMinSpanLines = [];\r\n        this.uniqueLines = [];\r\n        this.triangulationLines = [];\r\n        this.triangulationLines = lines;\r\n    }\r\n    get nonMinSpanLines() {\r\n        return this._nonMinSpanLines;\r\n    }\r\n    start() {\r\n        this.getLines();\r\n        this.uniqueLines.forEach((line) => line.makeDisjoinedSets());\r\n        this.uniqueLines.forEach((line, i) => {\r\n            if (!line.a.set.equals(line.b.set)) {\r\n                line.b.set = line.a.set.merge(line.b.set);\r\n                this.lines.push(line);\r\n                this._nonMinSpanLines[i] = null;\r\n            }\r\n        });\r\n        this._nonMinSpanLines = this._nonMinSpanLines.filter((line) => line);\r\n    }\r\n    getLines() {\r\n        let lines = Line.RemoveDuplicates(this.triangulationLines);\r\n        this.uniqueLines = [...lines];\r\n        this._nonMinSpanLines = [...lines];\r\n    }\r\n}\r\n//# sourceMappingURL=MinimumSpanningTree.js.map","dtsmap":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/triangulation/MinimumSpanningTree.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"MinimumSpanningTree.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../src/triangulation/MinimumSpanningTree.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,MAAM,CAAC,OAAO;IACZ,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,CAAM;IAC5B,OAAO,CAAC,gBAAgB,CAAc;IACtC,OAAO,CAAC,WAAW,CAAc;IACjC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAc;gBAErC,EAAE,KAAK,EAAE,EAAE,aAAa;aAIhC,eAAe,EAAI,IAAI,EAAE;IAI7B,KAAK,IAAI,IAAI;IAgBb,OAAO,CAAC,QAAQ;CAKjB\"}"},"dts":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/triangulation/MinimumSpanningTree.d.ts","text":"import { Line } from '../common';\r\nimport Triangulation from './Triangulation';\r\nexport default class MinimumSpanningTree {\r\n    readonly lines: Line[];\r\n    private _nonMinSpanLines;\r\n    private uniqueLines;\r\n    private readonly triangulationLines;\r\n    constructor({ lines }: Triangulation);\r\n    readonly nonMinSpanLines: Line[];\r\n    start(): void;\r\n    private getLines;\r\n}\r\n//# sourceMappingURL=MinimumSpanningTree.d.ts.map"}}
