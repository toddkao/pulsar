{"map":"{\"version\":3,\"file\":\"Vector.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/common/Vector.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { RadToDeg } from '../util/radDeg';\r\nexport default class Vector {\r\n    constructor({ x, y } = { x: 0, y: 0 }) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    clone() {\r\n        return new Vector({ x: this.x, y: this.y });\r\n    }\r\n    magnitude() {\r\n        const x = this.x * this.x;\r\n        const y = this.y * this.y;\r\n        const magnitude = Math.sqrt(x + y);\r\n        return magnitude;\r\n    }\r\n    dotProduct({ x, y }) {\r\n        return this.x * x + this.y * y;\r\n    }\r\n    add(vector) {\r\n        const x = this.x + vector.x;\r\n        const y = this.y + vector.y;\r\n        return new Vector({ x, y });\r\n    }\r\n    sub(vector) {\r\n        const x = this.x + -vector.x;\r\n        const y = this.y + -vector.y;\r\n        return new Vector({ x, y });\r\n    }\r\n    multiplyScalar(scalar) {\r\n        const x = this.x * scalar;\r\n        const y = this.y * scalar;\r\n        return new Vector({ x, y });\r\n    }\r\n    normalize() {\r\n        const magnitude = this.magnitude();\r\n        const x = this.x / magnitude;\r\n        const y = this.y / magnitude;\r\n        return new Vector({ x, y });\r\n    }\r\n    lerp(vector, alpha) {\r\n        const x = this.x + (vector.x - this.x) * alpha;\r\n        const y = this.y + (vector.y - this.y) * alpha;\r\n        return new Vector({ x, y });\r\n    }\r\n    negative() {\r\n        const x = -this.x;\r\n        const y = -this.y;\r\n        return new Vector({ x, y });\r\n    }\r\n    perpendicular() {\r\n        const right = new Vector({ x: -this.y, y: this.x });\r\n        const left = new Vector({ x: this.y, y: -this.x });\r\n        return { left, right };\r\n    }\r\n    scale(length) {\r\n        const normalized = this.normalize();\r\n        const x = normalized.x * length;\r\n        const y = normalized.y * length;\r\n        return new Vector({ x, y });\r\n    }\r\n    angleDeg(vector) {\r\n        const angle = this.angle(vector);\r\n        return RadToDeg(angle);\r\n    }\r\n    angleRad(vector) {\r\n        return this.angle(vector);\r\n    }\r\n    bisector(vector) {\r\n        const normalized = this.normalize();\r\n        const normalizedVector = vector.normalize();\r\n        const sum = normalized.add(normalizedVector);\r\n        const magnitude = (this.magnitude() + vector.magnitude()) / 2;\r\n        return sum.scale(magnitude);\r\n    }\r\n    equals(vector) {\r\n        return this.x === vector.x && this.y === vector.y;\r\n    }\r\n    distanceTo(vector) {\r\n        return this.sub(vector).magnitude();\r\n    }\r\n    midpoint(vector) {\r\n        const x = (this.x + vector.x) / 2;\r\n        const y = (this.y + vector.y) / 2;\r\n        return new Vector({ x, y });\r\n    }\r\n    static FindPolyCentroid(points) {\r\n        let x = 0;\r\n        let y = 0;\r\n        points.forEach((point) => {\r\n            x += point.x;\r\n            y += point.y;\r\n        });\r\n        x /= points.length;\r\n        y /= points.length;\r\n        return new Vector({ x, y });\r\n    }\r\n    static ArrangePointsCCW(points) {\r\n        const centroid = Vector.FindPolyCentroid(points);\r\n        let clone = [...points];\r\n        clone.sort((a, b) => {\r\n            const angleA = Math.atan2(a.y - centroid.y, a.x - centroid.x);\r\n            const angleB = Math.atan2(b.y - centroid.y, b.x - centroid.x);\r\n            return angleA - angleB;\r\n        });\r\n        return clone;\r\n    }\r\n    static UniqueFromArray(points) {\r\n        const isUnique = (vector, index, array) => {\r\n            return (array.findIndex((vectorIndex) => {\r\n                return vector.equals(vectorIndex);\r\n            }) === index);\r\n        };\r\n        return points.filter(isUnique);\r\n    }\r\n    angle(vector) {\r\n        const product = this.dotProduct(vector);\r\n        const cosAngle = product / (this.magnitude() * vector.magnitude());\r\n        return Math.acos(cosAngle);\r\n    }\r\n}\r\n//# sourceMappingURL=Vector.js.map","dtsmap":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/common/Vector.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"Vector.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../src/common/Vector.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACtC,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAIvC,MAAM,CAAC,OAAO;IACZ,GAAG,EAAE,YAAY,CAAC;IAClB,QAAQ,EAAE,QAAQ,CAAC;IACnB,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;gBAEE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAE,KAAsB;IAK5C,KAAK,IAAI,MAAM;IAIf,SAAS,IAAI,MAAM;IAOnB,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,MAAM,GAAG,MAAM;IAIpC,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAO3B,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAO3B,cAAc,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAOtC,SAAS,IAAI,MAAM;IAQnB,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM;IAO3C,QAAQ,IAAI,MAAM;IAOlB,aAAa,IAAI;QAAE,IAAI,EAAE,MAAM,CAAC;QAAC,KAAK,EAAE,MAAM,CAAA;KAAE;IAOhD,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAQ7B,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAKhC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAIhC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAShC,MAAM,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO;IAI/B,UAAU,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAIlC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM;IAOhC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IAejD,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,EAAE;IAanD,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,EAAE;IAYlD,OAAO,CAAC,KAAK;CAKd\"}"},"dts":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/common/Vector.d.ts","text":"import { point } from '../interfaces';\r\nimport { DisjoinedSet } from '../triangulation';\r\nimport { QuadTree } from '../quadtree';\r\nexport default class Vector {\r\n    set: DisjoinedSet;\r\n    quadTree: QuadTree;\r\n    x: number;\r\n    y: number;\r\n    constructor({ x, y }?: point);\r\n    clone(): Vector;\r\n    magnitude(): number;\r\n    dotProduct({ x, y }: Vector): number;\r\n    add(vector: Vector): Vector;\r\n    sub(vector: Vector): Vector;\r\n    multiplyScalar(scalar: number): Vector;\r\n    normalize(): Vector;\r\n    lerp(vector: Vector, alpha: number): Vector;\r\n    negative(): Vector;\r\n    perpendicular(): {\r\n        left: Vector;\r\n        right: Vector;\r\n    };\r\n    scale(length: number): Vector;\r\n    angleDeg(vector: Vector): number;\r\n    angleRad(vector: Vector): number;\r\n    bisector(vector: Vector): Vector;\r\n    equals(vector: Vector): boolean;\r\n    distanceTo(vector: Vector): number;\r\n    midpoint(vector: Vector): Vector;\r\n    static FindPolyCentroid(points: Vector[]): Vector;\r\n    static ArrangePointsCCW(points: Vector[]): Vector[];\r\n    static UniqueFromArray(points: Vector[]): Vector[];\r\n    private angle;\r\n}\r\n//# sourceMappingURL=Vector.d.ts.map"}}
