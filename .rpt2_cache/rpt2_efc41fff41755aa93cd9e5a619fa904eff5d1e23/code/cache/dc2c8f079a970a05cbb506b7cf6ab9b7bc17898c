{"code":"import { immutableObjectSort } from '../util';\r\nimport Vector from './Vector';\r\nimport Line from './Line';\r\n/*\r\n* !WARNING!\r\n* This class regards its point of origin at the top left corner.\r\n* */\r\nexport default class BoundingBox {\r\n    constructor(points) {\r\n        this.points = points;\r\n        this.findCorners();\r\n        this.makeLines();\r\n        this.findLimits();\r\n    }\r\n    get midpoints() {\r\n        return this.limits;\r\n    }\r\n    get area() {\r\n        return this.top.length * this.right.length;\r\n    }\r\n    get lines() {\r\n        return [this.top, this.right, this.bottom, this.left];\r\n    }\r\n    get width() {\r\n        return this.topRight.x - this.topLeft.x;\r\n    }\r\n    get height() {\r\n        return this.topRight.y - this.bottomRight.y;\r\n    }\r\n    grow(n) {\r\n        this.topLeft = this.topLeft.add(new Vector({ x: -n, y: n }));\r\n        this.topRight = this.topRight.add(new Vector({ x: n, y: n }));\r\n        this.bottomLeft = this.bottomLeft.add(new Vector({ x: -n, y: -n }));\r\n        this.bottomRight = this.bottomRight.add(new Vector({ x: n, y: -n }));\r\n    }\r\n    clone() {\r\n        return new BoundingBox(this.points);\r\n    }\r\n    findCorners() {\r\n        const sortedX = immutableObjectSort(this.points, 'x');\r\n        const sortedY = immutableObjectSort(this.points, 'y');\r\n        const firstX = sortedX[0];\r\n        const firstY = sortedY[0];\r\n        const lastX = sortedX[sortedX.length - 1];\r\n        const lastY = sortedY[sortedY.length - 1];\r\n        this.topLeft = new Vector({ x: firstX.x, y: lastY.y });\r\n        this.topRight = new Vector({ x: lastX.x, y: lastY.y });\r\n        this.bottomRight = new Vector({ x: lastX.x, y: firstY.y });\r\n        this.bottomLeft = new Vector({ x: firstX.x, y: firstY.y });\r\n    }\r\n    makeLines() {\r\n        this.top = new Line(this.topLeft, this.topRight);\r\n        this.right = new Line(this.topRight, this.bottomRight);\r\n        this.bottom = new Line(this.bottomRight, this.bottomLeft);\r\n        this.left = new Line(this.bottomLeft, this.topLeft);\r\n    }\r\n    findLimits() {\r\n        const top = this.topLeft.midpoint(this.topRight);\r\n        const bottom = this.bottomLeft.midpoint(this.bottomRight);\r\n        const left = this.topLeft.midpoint(this.bottomLeft);\r\n        const right = this.topRight.midpoint(this.bottomRight);\r\n        this.limits = { top, bottom, left, right };\r\n    }\r\n}\r\n"}
