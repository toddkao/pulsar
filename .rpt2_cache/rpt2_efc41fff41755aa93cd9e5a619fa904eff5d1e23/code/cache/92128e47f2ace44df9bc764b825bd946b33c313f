{"code":"import Vector from './Vector';\r\nimport Line from './Line';\r\nimport { uniqueId } from '../util';\r\nimport { Matrix4 } from './Matrix';\r\nexport default class Triangle {\r\n    constructor(a, b, c) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.id = uniqueId();\r\n        const ab = new Line(a, b);\r\n        const bc = new Line(b, c);\r\n        const ca = new Line(c, a);\r\n        this.lines = { ab, bc, ca };\r\n    }\r\n    get centroid() {\r\n        return Vector.FindPolyCentroid(this.points);\r\n    }\r\n    get points() {\r\n        return [this.a, this.b, this.c];\r\n    }\r\n    get linesArray() {\r\n        return [this.lines.ab, this.lines.bc, this.lines.ca];\r\n    }\r\n    equals(triangle) {\r\n        const { ab, bc, ca } = this.lines;\r\n        const sameAB = ab.equals(triangle.lines.ab) ||\r\n            ab.equals(triangle.lines.bc) ||\r\n            ab.equals(triangle.lines.ca);\r\n        const sameBC = bc.equals(triangle.lines.ab) ||\r\n            bc.equals(triangle.lines.bc) ||\r\n            bc.equals(triangle.lines.ca);\r\n        const sameCA = ca.equals(triangle.lines.ab) ||\r\n            ca.equals(triangle.lines.bc) ||\r\n            ca.equals(triangle.lines.ca);\r\n        return sameAB && sameBC && sameCA;\r\n    }\r\n    isPointInCircumcircle(point) {\r\n        const ax = this.a.x;\r\n        const ay = this.a.y;\r\n        const bx = this.b.x;\r\n        const by = this.b.y;\r\n        const cx = this.c.x;\r\n        const cy = this.c.y;\r\n        const a = ax;\r\n        const b = ay;\r\n        const c = ax * ax + ay * ay;\r\n        const d = 1;\r\n        const e = bx;\r\n        const f = by;\r\n        const g = bx * bx + by * by;\r\n        const h = 1;\r\n        const i = cx;\r\n        const j = cy;\r\n        const k = cx * cx + cy * cy;\r\n        const l = 1;\r\n        const m = point.x;\r\n        const n = point.y;\r\n        const o = point.x * point.x + point.y * point.y;\r\n        const p = 1;\r\n        const matrix = new Matrix4(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);\r\n        return matrix.determine() < 0;\r\n    }\r\n    hasPoint(point) {\r\n        return this.a.equals(point) || this.b.equals(point) || this.c.equals(point);\r\n    }\r\n    hasAnyPoint(points) {\r\n        return (points.filter((point) => {\r\n            return this.hasPoint(point);\r\n        }).length !== 0);\r\n    }\r\n    static LinesFromArray(triangles) {\r\n        return triangles.reduce((accumulator, triangle) => {\r\n            accumulator.push(...triangle.linesArray);\r\n            return accumulator;\r\n        }, []);\r\n    }\r\n    static GetUniqueLines(triangles) {\r\n        const lines = Triangle.LinesFromArray(triangles);\r\n        return lines.filter((line) => Line.IsUnique(line, lines));\r\n    }\r\n}\r\n"}
