{"code":"import { Vector, Shape } from '../common';\r\nexport default class QuadTree {\r\n    constructor(shape, points) {\r\n        this.shape = shape;\r\n        this.points = points;\r\n        this.children = [];\r\n        this.containedPoints = [];\r\n        this.capacity = 1;\r\n        this.start(points);\r\n    }\r\n    start(points) {\r\n        for (let i = 0; i < points.length; i++) {\r\n            const point = points[i];\r\n            if (!this.shape.containsPoint(point))\r\n                continue;\r\n            if (this.containedPoints.length < this.capacity) {\r\n                point.quadTree = this;\r\n                this.containedPoints.push(point);\r\n            }\r\n            else {\r\n                this.containedPoints.length = 0;\r\n                this.divide(points);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    findChildThatContains(point) {\r\n        const contains = this.shape.containsPoint(point);\r\n        const hasChildren = this.children.length > 0;\r\n        if (contains) {\r\n            if (hasChildren) {\r\n                return this.children.find((child) => {\r\n                    return child.findChildThatContains(point) !== null;\r\n                });\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    divide(points) {\r\n        const { topLeft, topRight, bottomLeft, bottomRight, } = this.shape.boundingBox;\r\n        const { top, bottom, left, right } = this.shape.boundingBox.midpoints;\r\n        const centroid = Vector.FindPolyCentroid([\r\n            top,\r\n            bottom,\r\n            left,\r\n            right,\r\n        ]);\r\n        const shape1 = new Shape([topLeft, top, centroid, left]);\r\n        const quad1 = new QuadTree(shape1, points);\r\n        const shape2 = new Shape([top, topRight, right, centroid]);\r\n        const quad2 = new QuadTree(shape2, points);\r\n        const shape3 = new Shape([centroid, right, bottomRight, bottom]);\r\n        const quad3 = new QuadTree(shape3, points);\r\n        const shape4 = new Shape([centroid, bottom, bottomLeft, left]);\r\n        const quad4 = new QuadTree(shape4, points);\r\n        this.children.push(quad1, quad2, quad3, quad4);\r\n        this.children.forEach((child) => {\r\n            child.parent = this;\r\n        });\r\n    }\r\n}\r\n"}
