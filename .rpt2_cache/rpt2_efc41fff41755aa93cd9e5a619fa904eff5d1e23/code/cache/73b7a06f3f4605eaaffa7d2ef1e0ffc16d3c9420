{"code":"import Vector from './Vector';\r\nimport Line from './Line';\r\nimport BoundingBox from './BoundingBox';\r\nimport { isOdd } from '../util';\r\nexport default class Shape {\r\n    constructor(points) {\r\n        this.points = points;\r\n        this.lines = Shape.makeLines(points);\r\n        this.boundingBox = new BoundingBox(points);\r\n    }\r\n    containsPoint(point) {\r\n        let intersects = 0;\r\n        const checkPoint = new Vector({\r\n            x: point.x,\r\n            y: Number.MAX_SAFE_INTEGER,\r\n        });\r\n        const checkLine = new Line(point, checkPoint);\r\n        this.lines.forEach((line) => {\r\n            if (line.intersects(checkLine)) {\r\n                intersects++;\r\n            }\r\n        });\r\n        return isOdd(intersects);\r\n    }\r\n    get centroid() {\r\n        return Vector.FindPolyCentroid(this.points);\r\n    }\r\n    static makeLines(points) {\r\n        const lines = [];\r\n        const ccwPoints = Vector.ArrangePointsCCW(points);\r\n        for (let i = 1; i < ccwPoints.length; i++) {\r\n            const a = ccwPoints[i - 1];\r\n            const b = ccwPoints[i];\r\n            const ab = new Line(a, b);\r\n            lines.push(ab);\r\n        }\r\n        const firstPoint = ccwPoints[0];\r\n        const lastPoint = ccwPoints[ccwPoints.length - 1];\r\n        const closingLine = new Line(firstPoint, lastPoint);\r\n        lines.push(closingLine);\r\n        return lines;\r\n    }\r\n}\r\n"}
