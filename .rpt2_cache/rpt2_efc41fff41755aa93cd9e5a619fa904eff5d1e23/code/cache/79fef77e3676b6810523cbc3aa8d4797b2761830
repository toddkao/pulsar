{"code":"import { contains, findIndex, randomInt } from '../util';\r\nexport default class Obstacles {\r\n    constructor(grid) {\r\n        this.grid = grid;\r\n        this.openList = [];\r\n        this.closedList = [];\r\n        this.openList = grid.tiles;\r\n    }\r\n    get list() {\r\n        return this.closedList;\r\n    }\r\n    add(tile) {\r\n        tile.isObstacle = true;\r\n        return this.manipulate(true, tile);\r\n    }\r\n    remove(tile) {\r\n        tile.isObstacle = false;\r\n        return this.manipulate(false, tile);\r\n    }\r\n    addRandom(count = 1) {\r\n        return this.manipulateMultipleRandom(true, count);\r\n    }\r\n    removeRandom(count = 1) {\r\n        return this.manipulateMultipleRandom(false, count);\r\n    }\r\n    getRandomOpen() {\r\n        return this.getRandom(true);\r\n    }\r\n    getRandom(open) {\r\n        const list = open ? this.openList : this.closedList;\r\n        const random = randomInt(0, list.length - 1);\r\n        const tile = list[random];\r\n        return tile ? tile : null;\r\n    }\r\n    manipulateMultipleRandom(add, count) {\r\n        const tiles = [];\r\n        if (count > 0) {\r\n            for (let i = 0; i < count; i++) {\r\n                const tile = this.manipulateSingleRandom(add);\r\n                tiles.push(tile);\r\n            }\r\n            return count === 1 ? tiles[0] : tiles;\r\n        }\r\n        return null;\r\n    }\r\n    manipulateSingleRandom(add) {\r\n        const tile = this.getRandom(add);\r\n        if (tile) {\r\n            this.manipulate(add, tile);\r\n            return tile;\r\n        }\r\n        return null;\r\n    }\r\n    manipulate(add, tile) {\r\n        const isInvalid = add ? tile.isObstacle : !tile.isObstacle;\r\n        if (isInvalid) {\r\n            return false;\r\n        }\r\n        let list;\r\n        let otherList;\r\n        if (add) {\r\n            list = this.openList;\r\n            otherList = this.closedList;\r\n        }\r\n        else {\r\n            list = this.closedList;\r\n            otherList = this.openList;\r\n        }\r\n        if (contains(list, tile)) {\r\n            tile.isObstacle = add;\r\n            const index = findIndex(list, tile);\r\n            list.splice(index, 1);\r\n            otherList.push(tile);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"}
