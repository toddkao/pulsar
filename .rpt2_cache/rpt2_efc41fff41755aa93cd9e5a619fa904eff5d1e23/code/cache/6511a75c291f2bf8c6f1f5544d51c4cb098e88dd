{"code":"import Obstacles from './Obstacles';\r\nimport { randomInt } from '../util';\r\nimport NavigatorTile from './NavigatorTile';\r\nimport { Vector } from '../common';\r\nconst defaultSize = { width: 10, height: 10 };\r\nexport default class Grid {\r\n    constructor(size = defaultSize) {\r\n        this.size = size;\r\n        this.onTileCreate = () => { };\r\n        this.obstacles = new Obstacles(this);\r\n        this.tiles = [];\r\n        this.rows = [];\r\n    }\r\n    /** Returns a random tile, can be an obstacle or not. */\r\n    randomTile() {\r\n        const x = randomInt(0, this.size.width - 1);\r\n        const y = randomInt(0, this.size.height - 1);\r\n        return this.findTile({ x, y });\r\n    }\r\n    /** Returns a random non-obstacle tile, if it exists. */\r\n    randomFreeTile() {\r\n        return this.obstacles.getRandomOpen();\r\n    }\r\n    /** Returns a tile at the specified coordinates. */\r\n    findTile({ x, y }) {\r\n        const row = this.rows[y];\r\n        return row && row.length > x ? row[x] : null;\r\n    }\r\n    makeGrid() {\r\n        for (let y = 0; y < this.size.height; y++) {\r\n            const row = [];\r\n            for (let x = 0; x < this.size.width; x++) {\r\n                const pos = new Vector({ x, y });\r\n                const tile = new NavigatorTile(pos);\r\n                this.onTileCreate(tile);\r\n                this.tiles.push(tile);\r\n                row.push(tile);\r\n            }\r\n            this.rows.push(row);\r\n        }\r\n    }\r\n}\r\n"}
