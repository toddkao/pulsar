{"code":"import { uniqueId } from '../util';\r\nimport DisjoinedSet from '../triangulation/DisjoinedSet';\r\nimport LineIntersection from './LineIntersection';\r\nexport default class Line {\r\n    constructor(a, b) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.id = uniqueId();\r\n    }\r\n    get length() {\r\n        return this.a.sub(this.b).magnitude();\r\n    }\r\n    get midpoint() {\r\n        return this.a.midpoint(this.b);\r\n    }\r\n    clone() {\r\n        return new Line(this.a, this.b);\r\n    }\r\n    equals(line) {\r\n        const equalsNormal = this.a.equals(line.a) && this.b.equals(line.b);\r\n        const equalsReverse = this.a.equals(line.b) && this.b.equals(line.a);\r\n        return equalsNormal || equalsReverse;\r\n    }\r\n    intersects(line) {\r\n        return new LineIntersection(this, line).intersects;\r\n    }\r\n    intersectionPoint(line) {\r\n        return new LineIntersection(this, line).point;\r\n    }\r\n    makeDisjoinedSets() {\r\n        this.a.set = new DisjoinedSet(this.a);\r\n        this.b.set = new DisjoinedSet(this.b);\r\n    }\r\n    static PointsFromArray(lines) {\r\n        return lines.reduce((accumulator, line) => {\r\n            accumulator.push(...[line.a, line.b]);\r\n            return accumulator;\r\n        }, []);\r\n    }\r\n    static IsUnique(line, lines) {\r\n        return (lines.find((currentLine) => {\r\n            return line.id === currentLine.id ? false : line.equals(currentLine);\r\n        }) === undefined);\r\n    }\r\n    static RemoveDuplicates(lines) {\r\n        let clone = [...lines];\r\n        clone.sort((a, b) => a.length - b.length);\r\n        for (let i = clone.length - 1; i >= 1; i--) {\r\n            const a = clone[i];\r\n            const b = clone[i - 1];\r\n            if (a.equals(b)) {\r\n                clone.splice(i, 1);\r\n            }\r\n        }\r\n        return clone;\r\n    }\r\n}\r\n"}
