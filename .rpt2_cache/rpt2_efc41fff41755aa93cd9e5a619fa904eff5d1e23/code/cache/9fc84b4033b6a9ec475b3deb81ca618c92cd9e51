{"code":"import { Clock } from '../../common';\r\nimport { contains, removeFromArray } from '../../util';\r\nimport Component from '../Component';\r\nimport EntityUpdater from './EntityUpdater';\r\nimport Invoke from './Invoke';\r\nimport InvokeRepeating from './InvokeRepeating';\r\nexport default class Updater {\r\n    constructor() {\r\n        this.onUpdateComplete = new Component();\r\n        this.components = [];\r\n        this.running = false;\r\n        this.clock = new Clock();\r\n        this.entityUpdater = new EntityUpdater(this);\r\n    }\r\n    start() {\r\n        if (!this.running) {\r\n            this.running = true;\r\n            this.clock.start();\r\n            this.entityUpdater.start();\r\n            this.components.forEach((component) => component.start());\r\n            this.update();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    stop() {\r\n        if (this.running) {\r\n            this.running = false;\r\n            cancelAnimationFrame(this.frameId);\r\n            this.clock.stop();\r\n            this.entityUpdater.stop();\r\n            this.components.forEach((component) => component.stop());\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    clear() {\r\n        this.stop();\r\n        this.entityUpdater.clear();\r\n        this.components.length = 0;\r\n    }\r\n    add(behaviour) {\r\n        if (behaviour instanceof Component) {\r\n            return this.addComponent(behaviour);\r\n        }\r\n        else {\r\n            return this.entityUpdater.add(behaviour);\r\n        }\r\n    }\r\n    remove(behaviour) {\r\n        if (behaviour instanceof Component) {\r\n            return this.removeComponent(behaviour);\r\n        }\r\n        else {\r\n            return this.entityUpdater.remove(behaviour);\r\n        }\r\n    }\r\n    toggle(behaviour) {\r\n        if (behaviour instanceof Component) {\r\n            return this.toggleComponent(behaviour);\r\n        }\r\n        else {\r\n            return this.entityUpdater.toggle(behaviour);\r\n        }\r\n    }\r\n    isUpdatingComponent(component) {\r\n        return contains(this.components, component);\r\n    }\r\n    addComponent(component) {\r\n        if (!this.isUpdatingComponent(component)) {\r\n            component.updater = this;\r\n            this.pushToQueue(component);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeComponent(component) {\r\n        return removeFromArray(this.components, component);\r\n    }\r\n    toggleComponent(component) {\r\n        if (!this.addComponent(component)) {\r\n            this.removeComponent(component);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    invoke(component, time) {\r\n        const invoke = new Invoke(this, component, time);\r\n        this.add(invoke);\r\n    }\r\n    invokeRepeating(component, time, times = Infinity) {\r\n        const invoke = new InvokeRepeating(this, component, time, times);\r\n        this.add(invoke);\r\n    }\r\n    getTickData() {\r\n        const deltaTime = this.clock.getDelta();\r\n        const deltaTimeMS = deltaTime * 1000;\r\n        const elapsedTime = this.clock.getElapsed();\r\n        return { deltaTime, deltaTimeMS, elapsedTime };\r\n    }\r\n    pushToQueue(component) {\r\n        if (typeof component.updatePriority === 'number') {\r\n            this.components.splice(component.updatePriority, 0, component);\r\n        }\r\n        else {\r\n            this.components.push(component);\r\n        }\r\n    }\r\n    update() {\r\n        this.frameId = requestAnimationFrame(() => this.update());\r\n        const tickData = this.getTickData();\r\n        this.components.forEach((component) => {\r\n            component.update(tickData);\r\n        });\r\n        this.onUpdateComplete.update(tickData);\r\n    }\r\n}\r\n"}
