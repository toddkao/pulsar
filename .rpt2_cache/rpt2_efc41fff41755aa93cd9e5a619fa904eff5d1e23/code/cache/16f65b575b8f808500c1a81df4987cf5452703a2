{"code":"import { Vector, Triangle } from '../common';\r\nimport Hull from './Hull';\r\nimport MinimumSpanningTree from './MinimumSpanningTree';\r\nexport default class Triangulation {\r\n    constructor(points) {\r\n        this.points = points;\r\n        this.lines = [];\r\n        this.triangles = [];\r\n        this.holderTriangle = Triangulation.MakeHolderTriangle();\r\n        this.triangles.push(this.holderTriangle);\r\n        this.hull = new Hull(this);\r\n        this.MST = new MinimumSpanningTree(this);\r\n    }\r\n    start() {\r\n        this.points.forEach((point) => {\r\n            const badTriangles = [];\r\n            for (let i = this.triangles.length - 1; i >= 0; i--) {\r\n                const triangle = this.triangles[i];\r\n                if (triangle.isPointInCircumcircle(point)) {\r\n                    this.triangles.splice(i, 1);\r\n                    badTriangles.push(triangle);\r\n                }\r\n            }\r\n            const uniqueLines = Triangle.GetUniqueLines(badTriangles);\r\n            uniqueLines.forEach((line) => {\r\n                const triangle = new Triangle(point, line.a, line.b);\r\n                this.triangles.push(triangle);\r\n            });\r\n        });\r\n        this.cleanHolderTriangle();\r\n        this.addFinishedTriangulationLines();\r\n    }\r\n    static MakeHolderTriangle() {\r\n        const side = Number.MAX_SAFE_INTEGER;\r\n        const a = new Vector({ x: side / 2, y: -side });\r\n        const b = new Vector({ x: -side, y: side });\r\n        const c = new Vector({ x: side, y: side });\r\n        return new Triangle(a, b, c);\r\n    }\r\n    cleanHolderTriangle() {\r\n        const { a, b, c } = this.holderTriangle;\r\n        for (let i = this.triangles.length - 1; i >= 0; i--) {\r\n            const triangle = this.triangles[i];\r\n            if (triangle.hasAnyPoint([a, b, c])) {\r\n                this.triangles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    addFinishedTriangulationLines() {\r\n        this.triangles.forEach((triangle) => {\r\n            this.lines.push(...triangle.linesArray);\r\n        });\r\n    }\r\n}\r\n"}
