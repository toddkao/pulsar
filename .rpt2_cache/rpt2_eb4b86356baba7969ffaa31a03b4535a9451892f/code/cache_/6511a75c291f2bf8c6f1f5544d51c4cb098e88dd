{"map":"{\"version\":3,\"file\":\"Grid.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/pathfinding/Grid.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,IAAM,WAAW,GAAS,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;AAGpD;IAME,cAAoB,IAAwB;QAAxB,qBAAA,EAAA,kBAAwB;QAAxB,SAAI,GAAJ,IAAI,CAAoB;QAL5C,iBAAY,GAAiB,cAAO,CAAC,CAAC;QAC7B,cAAS,GAAc,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,UAAK,GAAoB,EAAE,CAAC;QAC5B,SAAI,GAAU,EAAE,CAAC;IAEqB,CAAC;IAEhD,wDAAwD;IACxD,yBAAU,GAAV;QACE,IAAM,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC5C,IAAM,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE7C,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,wDAAwD;IACxD,6BAAc,GAAd;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IACxC,CAAC;IAED,mDAAmD;IACnD,uBAAQ,GAAR,UAAS,EAAe;YAAb,QAAC,EAAE,QAAC;QACb,IAAM,GAAG,GAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,OAAO,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/C,CAAC;IAED,uBAAQ,GAAR;QACE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAM,GAAG,GAAQ,EAAE,CAAC;YAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAM,GAAG,GAAW,IAAI,MAAM,CAAC,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,CAAC;gBACzC,IAAM,IAAI,GAAkB,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC;gBACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACtB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAChB;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACrB;IACH,CAAC;IACH,WAAC;AAAD,CAAC,AA1CD,IA0CC\"}","code":"import Obstacles from './Obstacles';\r\nimport { randomInt } from '../util';\r\nimport NavigatorTile from './NavigatorTile';\r\nimport { Vector } from '../common';\r\nvar defaultSize = { width: 10, height: 10 };\r\nvar Grid = /** @class */ (function () {\r\n    function Grid(size) {\r\n        if (size === void 0) { size = defaultSize; }\r\n        this.size = size;\r\n        this.onTileCreate = function () { };\r\n        this.obstacles = new Obstacles(this);\r\n        this.tiles = [];\r\n        this.rows = [];\r\n    }\r\n    /** Returns a random tile, can be an obstacle or not. */\r\n    Grid.prototype.randomTile = function () {\r\n        var x = randomInt(0, this.size.width - 1);\r\n        var y = randomInt(0, this.size.height - 1);\r\n        return this.findTile({ x: x, y: y });\r\n    };\r\n    /** Returns a random non-obstacle tile, if it exists. */\r\n    Grid.prototype.randomFreeTile = function () {\r\n        return this.obstacles.getRandomOpen();\r\n    };\r\n    /** Returns a tile at the specified coordinates. */\r\n    Grid.prototype.findTile = function (_a) {\r\n        var x = _a.x, y = _a.y;\r\n        var row = this.rows[y];\r\n        return row && row.length > x ? row[x] : null;\r\n    };\r\n    Grid.prototype.makeGrid = function () {\r\n        for (var y = 0; y < this.size.height; y++) {\r\n            var row = [];\r\n            for (var x = 0; x < this.size.width; x++) {\r\n                var pos = new Vector({ x: x, y: y });\r\n                var tile = new NavigatorTile(pos);\r\n                this.onTileCreate(tile);\r\n                this.tiles.push(tile);\r\n                row.push(tile);\r\n            }\r\n            this.rows.push(row);\r\n        }\r\n    };\r\n    return Grid;\r\n}());\r\nexport default Grid;\r\n//# sourceMappingURL=Grid.js.map","dtsmap":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/pathfinding/Grid.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"Grid.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../src/pathfinding/Grid.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAIjD,aAAK,YAAY,GAAG,CAAC,IAAI,EAAE,aAAa,KAAK,IAAI,CAAC;AAElD,MAAM,CAAC,OAAO;IAMA,OAAO,CAAC,IAAI;IALxB,YAAY,EAAE,YAAY,CAAY;IACtC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAuB;IACpD,QAAQ,CAAC,KAAK,EAAE,aAAa,EAAE,CAAM;IACrC,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,CAAM;gBAEN,IAAI,GAAE,IAAkB;IAE5C,wDAAwD;IACxD,UAAU,IAAI,aAAa;IAO3B,wDAAwD;IACxD,cAAc,IAAI,aAAa,GAAG,IAAI;IAItC,mDAAmD;IACnD,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,GAAG,aAAa,GAAG,IAAI;IAK/C,QAAQ,IAAI,IAAI;CAejB\"}"},"dts":{"name":"/Users/radu.milici/Documents/git/pulsar-pathfinding/pathfinding/Grid.d.ts","text":"import Obstacles from './Obstacles';\r\nimport NavigatorTile from './NavigatorTile';\r\nimport { row, point, size } from '../interfaces';\r\ndeclare type onTileCreate = (tile: NavigatorTile) => void;\r\nexport default class Grid {\r\n    private size;\r\n    onTileCreate: onTileCreate;\r\n    readonly obstacles: Obstacles;\r\n    readonly tiles: NavigatorTile[];\r\n    readonly rows: row[];\r\n    constructor(size?: size);\r\n    /** Returns a random tile, can be an obstacle or not. */\r\n    randomTile(): NavigatorTile;\r\n    /** Returns a random non-obstacle tile, if it exists. */\r\n    randomFreeTile(): NavigatorTile | null;\r\n    /** Returns a tile at the specified coordinates. */\r\n    findTile({ x, y }: point): NavigatorTile | null;\r\n    makeGrid(): void;\r\n}\r\nexport {};\r\n//# sourceMappingURL=Grid.d.ts.map"}}
